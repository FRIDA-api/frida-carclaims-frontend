/* tslint:disable */
/* eslint-disable */
/**
 * FRIDA Car Claims Data Schema
 * Die FRIDA Schaden API - ermöglicht es Nutzer:innen im Schadenfall die wichtigsten Versicherungs- und Unfalldaten über eine Schadenplattform direkt an den Versicherer zu übertragen und den Schaden damit offiziel zu melden.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: floneuss99@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { VehicleDriverDamagedWindowImagesInner } from './VehicleDriverDamagedWindowImagesInner';
import {
    VehicleDriverDamagedWindowImagesInnerFromJSON,
    VehicleDriverDamagedWindowImagesInnerFromJSONTyped,
    VehicleDriverDamagedWindowImagesInnerToJSON,
} from './VehicleDriverDamagedWindowImagesInner';
import type { VehicleDriverDamagedCarImagesInner } from './VehicleDriverDamagedCarImagesInner';
import {
    VehicleDriverDamagedCarImagesInnerFromJSON,
    VehicleDriverDamagedCarImagesInnerFromJSONTyped,
    VehicleDriverDamagedCarImagesInnerToJSON,
} from './VehicleDriverDamagedCarImagesInner';
import type { Person } from './Person';
import {
    PersonFromJSON,
    PersonFromJSONTyped,
    PersonToJSON,
} from './Person';

/**
 * Holds all information of a `Vehicle Driver`.
 * @export
 * @interface VehicleDriver
 */
export interface VehicleDriver {
    /**
     * 
     * @type {Person}
     * @memberof VehicleDriver
     */
    personalInformation?: Person;
    /**
     * Führerscheinnummer
     * @type {string}
     * @memberof VehicleDriver
     */
    driverLicensenumber?: string;
    /**
     * Führerschein ausgestellt von
     * @type {string}
     * @memberof VehicleDriver
     */
    licenseIssuedBy?: string;
    /**
     * Bilder vom Schaden
     * @type {Array<VehicleDriverDamagedCarImagesInner>}
     * @memberof VehicleDriver
     */
    damagedCarImages?: Array<VehicleDriverDamagedCarImagesInner>;
    /**
     * Bilder vom Glasschaden
     * @type {Array<VehicleDriverDamagedWindowImagesInner>}
     * @memberof VehicleDriver
     */
    damagedWindowImages?: Array<VehicleDriverDamagedWindowImagesInner>;
    /**
     * Auswahl der beschädigten Stellen
     * @type {Array<string>}
     * @memberof VehicleDriver
     */
    driverDamagedpartsGraphic?: Array<VehicleDriverDriverDamagedpartsGraphicEnum>;
    /**
     * Beschreibung sichtbare Schäden
     * @type {string}
     * @memberof VehicleDriver
     */
    driverVisibleDamage?: string;
    /**
     * Bemerkungen des Fahrers
     * @type {string}
     * @memberof VehicleDriver
     */
    driverComments?: string;
    /**
     * Fahrbereitschaft des Fahrzeugs ja/nein
     * @type {string}
     * @memberof VehicleDriver
     */
    vehicleDrivingAbility?: VehicleDriverVehicleDrivingAbilityEnum;
    /**
     * Auswahl der Schadenursache
     * @type {string}
     * @memberof VehicleDriver
     */
    damageCausedBy?: VehicleDriverDamageCausedByEnum;
    /**
     * Tierart
     * @type {string}
     * @memberof VehicleDriver
     */
    typeOfWildlife?: string;
    /**
     * Bestätigung durch Förster || native FileAPI des Clients (Dunkelverarbeitung)
     * @type {string}
     * @memberof VehicleDriver
     */
    certificateForWildlife?: string;
    /**
     * Werkstatt Standort
     * @type {string}
     * @memberof VehicleDriver
     */
    garageLocation?: string;
}


/**
 * @export
 */
export const VehicleDriverDriverDamagedpartsGraphicEnum = {
    VorneLinks: 'vorne links',
    VorneRechts: 'vorne rechts',
    SeiteVorneLinks: 'Seite vorne links',
    SeiteVorneRechts: 'Seite vorne rechts',
    FahrertrLinks: 'Fahrertür links',
    BeifahrertrRechts: 'Beifahrertür rechts',
    HintereTrLinks: 'hintere Tür links',
    HintereTrRechts: 'hintere Tür rechts',
    SeiteHintenLinks: 'Seite hinten links',
    SeiteHintenRechts: 'Seite hinten rechts',
    HintenLinks: 'hinten links',
    HintenRechts: 'hinten rechts',
    Motorhaube: 'Motorhaube',
    Frontscheibe: 'Frontscheibe',
    Dach: 'Dach',
    Heckscheibe: 'Heckscheibe',
    Kofferraum: 'Kofferraum'
} as const;
export type VehicleDriverDriverDamagedpartsGraphicEnum = typeof VehicleDriverDriverDamagedpartsGraphicEnum[keyof typeof VehicleDriverDriverDamagedpartsGraphicEnum];

/**
 * @export
 */
export const VehicleDriverVehicleDrivingAbilityEnum = {
    NotSpecified: 'not_specified',
    True: 'true',
    False: 'false'
} as const;
export type VehicleDriverVehicleDrivingAbilityEnum = typeof VehicleDriverVehicleDrivingAbilityEnum[keyof typeof VehicleDriverVehicleDrivingAbilityEnum];

/**
 * @export
 */
export const VehicleDriverDamageCausedByEnum = {
    Auffahren: 'Auffahren',
    RangierenParken: 'Rangieren/Parken',
    MissachtungDerVorfahrt: 'Missachtung der Vorfahrt',
    Abbiegen: 'Abbiegen',
    AbkommenVonDerFahrbahn: 'Abkommen von der Fahrbahn',
    Berholvorgang: 'Überholvorgang',
    Spurwechsel: 'Spurwechsel',
    Sonstiges: 'Sonstiges'
} as const;
export type VehicleDriverDamageCausedByEnum = typeof VehicleDriverDamageCausedByEnum[keyof typeof VehicleDriverDamageCausedByEnum];


/**
 * Check if a given object implements the VehicleDriver interface.
 */
export function instanceOfVehicleDriver(value: object): value is VehicleDriver {
    return true;
}

export function VehicleDriverFromJSON(json: any): VehicleDriver {
    return VehicleDriverFromJSONTyped(json, false);
}

export function VehicleDriverFromJSONTyped(json: any, ignoreDiscriminator: boolean): VehicleDriver {
    if (json == null) {
        return json;
    }
    return {
        
        'personalInformation': json['personalInformation'] == null ? undefined : PersonFromJSON(json['personalInformation']),
        'driverLicensenumber': json['driverLicensenumber'] == null ? undefined : json['driverLicensenumber'],
        'licenseIssuedBy': json['licenseIssuedBy'] == null ? undefined : json['licenseIssuedBy'],
        'damagedCarImages': json['damagedCarImages'] == null ? undefined : ((json['damagedCarImages'] as Array<any>).map(VehicleDriverDamagedCarImagesInnerFromJSON)),
        'damagedWindowImages': json['damagedWindowImages'] == null ? undefined : ((json['damagedWindowImages'] as Array<any>).map(VehicleDriverDamagedWindowImagesInnerFromJSON)),
        'driverDamagedpartsGraphic': json['driverDamagedpartsGraphic'] == null ? undefined : json['driverDamagedpartsGraphic'],
        'driverVisibleDamage': json['driverVisibleDamage'] == null ? undefined : json['driverVisibleDamage'],
        'driverComments': json['driverComments'] == null ? undefined : json['driverComments'],
        'vehicleDrivingAbility': json['vehicleDrivingAbility'] == null ? undefined : json['vehicleDrivingAbility'],
        'damageCausedBy': json['damageCausedBy'] == null ? undefined : json['damageCausedBy'],
        'typeOfWildlife': json['typeOfWildlife'] == null ? undefined : json['typeOfWildlife'],
        'certificateForWildlife': json['certificateForWildlife'] == null ? undefined : json['certificateForWildlife'],
        'garageLocation': json['garageLocation'] == null ? undefined : json['garageLocation'],
    };
}

export function VehicleDriverToJSON(value?: VehicleDriver | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'personalInformation': PersonToJSON(value['personalInformation']),
        'driverLicensenumber': value['driverLicensenumber'],
        'licenseIssuedBy': value['licenseIssuedBy'],
        'damagedCarImages': value['damagedCarImages'] == null ? undefined : ((value['damagedCarImages'] as Array<any>).map(VehicleDriverDamagedCarImagesInnerToJSON)),
        'damagedWindowImages': value['damagedWindowImages'] == null ? undefined : ((value['damagedWindowImages'] as Array<any>).map(VehicleDriverDamagedWindowImagesInnerToJSON)),
        'driverDamagedpartsGraphic': value['driverDamagedpartsGraphic'],
        'driverVisibleDamage': value['driverVisibleDamage'],
        'driverComments': value['driverComments'],
        'vehicleDrivingAbility': value['vehicleDrivingAbility'],
        'damageCausedBy': value['damageCausedBy'],
        'typeOfWildlife': value['typeOfWildlife'],
        'certificateForWildlife': value['certificateForWildlife'],
        'garageLocation': value['garageLocation'],
    };
}

